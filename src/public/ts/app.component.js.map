{"version":3,"sources":["app.component.ts"],"names":[],"mappings":"AAAA;;GAEG;;;;;;;;;;;;AAEH,sCAAkD;AAClD,0CAAyD;AACzD,4DAAwD;AACxD,0CAAuC;AAQvC,IAAa,YAAY;IACrB,sBACY,qBAA4C,EAC5C,aAA4B,EAC5B,MAAc;QAFd,0BAAqB,GAArB,qBAAqB,CAAuB;QAC5C,kBAAa,GAAb,aAAa,CAAe;QAC5B,WAAM,GAAN,MAAM,CAAQ;IACxB,CAAC;IAGH,+BAAQ,GAAR;QAAA,iBAmBC;QAlBG,IAAI,CAAC,qBAAqB,CAAC,cAAc,EAAE,CAAC,SAAS,CACjD,UAAA,IAAI;YACA;;eAEG;YACH,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC;YAClB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;gBACZ,kGAAkG;gBAClG,YAAY,CAAC,OAAO,CAAC,cAAc,EAAE,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;gBACjE,KAAI,CAAC,aAAa,CAAC,OAAO,GAAG,IAAI,CAAC;YACtC,CAAC;YAAC,IAAI,CAAC,CAAC;gBACJ,YAAY,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;gBACxC,KAAI,CAAC,aAAa,CAAC,OAAO,GAAG,KAAK,CAAC;YACvC,CAAC;QACL,CAAC,EACD,UAAA,KAAK;QACL,CAAC,CAAC,CAAC;QACP,uCAAuC;IAC3C,CAAC;IACL,mBAAC;AAAD,CA5BA,AA4BC,IAAA;AA5BY,YAAY;IANxB,gBAAS,CAAC;QACP,uBAAuB;QACvB,QAAQ,EAAE,QAAQ;QAClB,WAAW,EAAE,sBAAsB;KACtC,CAAC;qCAIqC,6BAAqB;QAC7B,8BAAa;QACpB,eAAM;GAJjB,YAAY,CA4BxB;AA5BY,oCAAY","file":"app.component.js","sourcesContent":["/**\r\n * Created by ori on 4/27/2017.\r\n */\r\n\r\nimport { Component, OnInit } from '@angular/core';\r\nimport { AuthenticationService } from './services/index';\r\nimport {GlobalService} from \"./services/global.service\";\r\nimport {Router} from \"@angular/router\";\r\n\r\n@Component({\r\n    // moduleId: module.id,\r\n    selector: 'my-app',\r\n    templateUrl: './app.component.html'\r\n})\r\n\r\nexport class AppComponent implements OnInit{\r\n    constructor(\r\n        private authenticationService: AuthenticationService,\r\n        private globalService: GlobalService,\r\n        private router: Router,\r\n    ){}\r\n\r\n\r\n    ngOnInit(): void {\r\n        this.authenticationService.isSessionLogin().subscribe(\r\n            data => {\r\n                /**\r\n                 * @param {{err:number,errMessage:string}} data\r\n                 */\r\n                console.log(data);\r\n                if (!data.err) {\r\n                    // store user details and jwt token in local storage to keep user logged in between page refreshes\r\n                    localStorage.setItem('currentStore', JSON.stringify(data.store));\r\n                    this.globalService.isLogin = true;\r\n                } else {\r\n                    localStorage.removeItem('currentStore');\r\n                    this.globalService.isLogin = false;\r\n                }\r\n            },\r\n            error => {\r\n            });\r\n        // this.authenticationService.isLogin()\r\n    }\r\n}\r\n"]}