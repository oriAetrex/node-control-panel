{"version":3,"sources":["services/authentication.service.ts"],"names":[],"mappings":";;;;;;;;;;;AAAA;;GAEG;AACH,sCAA2C;AAC3C,sCAAwD;AAExD,iCAA8B;AAE9B,4CAA0C;AAG1C,IAAa,qBAAqB;IAC9B,+BAAoB,IAAU,EAAU,MAAiB;QAArC,SAAI,GAAJ,IAAI,CAAM;QAAU,WAAM,GAAN,MAAM,CAAW;IAAI,CAAC;IAE9D,qCAAK,GAAL,UAAM,QAAgB,EAAE,QAAgB;QACpC,IAAI,OAAO,GAAG,IAAI,cAAO,EAAE,CAAC;QAC5B,OAAO,CAAC,MAAM,CAAC,cAAc,EAAE,kBAAkB,CAAC,CAAA;QAClD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,YAAY,EAAE,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,QAAQ,EAAE,EAAC,EAAC,OAAO,EAAE,OAAO,EAAC,CAAC;aAClH,GAAG,CAAC,UAAC,QAAkB;YACpB,0DAA0D;YAC1D,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC3B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YACjB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAG,CAAC;QAC5B,CAAC,CAAC,CAAC;IACX,CAAC;IAED,sCAAM,GAAN;QACI,iDAAiD;QACjD,YAAY,CAAC,UAAU,CAAC,cAAc,CAAC,CAAC;QACxC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,aAAa,EAAE,EAAE,EAAC,EAAE,CAAC;aAC3D,GAAG,CAAC,UAAC,QAAkB;YACpB,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC3B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YACjB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAG,CAAC;QAC5B,CAAC,CAAC,CAAC;IACX,CAAC;IACD,uCAAO,GAAP;QACI,EAAE,CAAA,CAAC,YAAY,CAAC,OAAO,CAAC,cAAc,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;YAC/C,MAAM,CAAC,KAAK,CAAC;QACjB,CAAC;QAAC,IAAI,CAAC,CAAC;YACJ,MAAM,CAAC,IAAI,CAAC;QAChB,CAAC;IACL,CAAC;IACD,8CAAc,GAAd;QACI,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,yBAAyB,EAAE,EAAE,EAAC,EAAE,CAAC;aACvE,GAAG,CAAC,UAAC,QAAkB;YACpB,IAAI,IAAI,GAAG,QAAQ,CAAC,IAAI,EAAE,CAAC;YAC3B,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAA;YACjB,MAAM,CAAC,IAAI,CAAC,IAAI,IAAI,EAAG,CAAC;QAC5B,CAAC,CAAC,CAAC;IACX,CAAC;IACL,4BAAC;AAAD,CAxCA,AAwCC,IAAA;AAxCY,qBAAqB;IADjC,iBAAU,EAAE;qCAEiB,WAAI,EAAkB,sBAAS;GADhD,qBAAqB,CAwCjC;AAxCY,sDAAqB","file":"authentication.service.js","sourcesContent":["/**\r\n * Created by ori on 4/27/2017.\r\n */\r\nimport { Injectable } from '@angular/core';\r\nimport { Http, Headers, Response } from '@angular/http';\r\nimport { Observable } from 'rxjs/Observable';\r\nimport 'rxjs/add/operator/map'\r\n\r\nimport { AppConfig } from '../app.config';\r\n\r\n@Injectable()\r\nexport class AuthenticationService {\r\n    constructor(private http: Http, private config: AppConfig) { }\r\n\r\n    login(username: string, password: string) {\r\n        var headers = new Headers();\r\n        headers.append('Content-Type', 'application/json')\r\n        return this.http.post(this.config.apiUrl + 'ajax_login', { username: username, password: password },{headers: headers})\r\n            .map((response: Response) => {\r\n                // login successful if there's a jwt token in the response\r\n                let json = response.json();\r\n                console.log(json)\r\n                return json.data || { };\r\n            });\r\n    }\r\n\r\n    logout() {\r\n        // remove user from local storage to log user out\r\n        localStorage.removeItem('currentStore');\r\n        return this.http.post(this.config.apiUrl + 'ajax_logout', {},{})\r\n            .map((response: Response) => {\r\n                let json = response.json();\r\n                console.log(json)\r\n                return json.data || { };\r\n            });\r\n    }\r\n    isLogin() {\r\n        if(localStorage.getItem(\"currentStore\") === null) {\r\n            return false;\r\n        } else {\r\n            return true;\r\n        }\r\n    }\r\n    isSessionLogin() {\r\n        return this.http.post(this.config.apiUrl + 'ajax_login_from_session', {},{})\r\n            .map((response: Response) => {\r\n                let json = response.json();\r\n                console.log(json)\r\n                return json.data || { };\r\n            });\r\n    }\r\n}\r\n"]}